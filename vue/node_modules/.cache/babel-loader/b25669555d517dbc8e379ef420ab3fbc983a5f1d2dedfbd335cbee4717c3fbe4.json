{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'UserRegister',\n  data() {\n    return {\n      uname: '',\n      uemail: '',\n      utel: '',\n      upassword: '',\n      repeatPassword: '',\n      isPasswordValid: true\n    };\n  },\n  computed: {\n    passwordMatchMessage() {\n      if (!this.upassword && !this.repeatPassword) {\n        return '';\n      }\n      return this.upassword === this.repeatPassword ? 'Passwords match!' : 'Passwords do not match!';\n    },\n    passwordMatchClass() {\n      return this.upassword === this.repeatPassword ? 'text-success' : 'text-danger';\n    }\n  },\n  methods: {\n    async checkEmailDuplicate() {\n      // 이메일 유효성 검사\n      if (!this.uemail) {\n        alert('Please enter an email address.');\n        return;\n      }\n\n      // 정규 표현식을 사용하여 이메일 형식 검사\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailPattern.test(this.uemail)) {\n        alert('Please enter a valid email address.');\n        return;\n      }\n      try {\n        const response = await axios.post('/api/user/check-email', {\n          uemail: this.uemail\n        });\n        if (response.data) {\n          alert('This email is already in use.');\n        } else {\n          alert('This email is available.');\n        }\n      } catch (error) {\n        alert('Error checking email: ' + error.message);\n      }\n    }\n  },\n  validateTel() {\n    this.utel = this.utel.replace(/[^0-9]/g, '');\n  },\n  async registerUser() {\n    if (this.upassword !== this.repeatPassword) {\n      alert('Passwords do not match.');\n      return;\n    }\n    if (!this.isPasswordValid) {\n      alert('Password must be 8-16 characters long and include at least one letter, one number, and one special character.');\n      return;\n    }\n    try {\n      const currentDate = new Date().toISOString();\n      const response = await axios.post('/api/user/register', {\n        uname: this.uname,\n        uemail: this.uemail,\n        utel: this.utel,\n        upassword: this.upassword,\n        utype: '1',\n        ustatus: '1',\n        udate: currentDate\n      });\n      if (response.status === 200) {\n        alert('Registration successful!');\n        this.$router.push({\n          name: 'UserLogin'\n        });\n      } else {\n        alert('Registration failed: ' + response.data);\n      }\n    } catch (error) {\n      alert('Registration failed: ' + error.message);\n    }\n  },\n  watch: {\n    upassword(value) {\n      this.isPasswordValid = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*?_]).{8,16}$/.test(value);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","uname","uemail","utel","upassword","repeatPassword","isPasswordValid","computed","passwordMatchMessage","passwordMatchClass","methods","checkEmailDuplicate","alert","emailPattern","test","response","post","error","message","validateTel","replace","registerUser","currentDate","Date","toISOString","utype","ustatus","udate","status","$router","push","watch","value"],"sources":["D:\\BizwebFrontEnd\\vue\\src\\components\\User\\UserRegister.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"card o-hidden border-0 shadow-lg my-5\">\r\n      <div class=\"card-body p-0\">\r\n        <div class=\"row\">\r\n          <div class=\"col-lg-5 d-none d-lg-block bg-register-image\"></div>\r\n          <div class=\"col-lg-7\">\r\n            <div class=\"p-5\">\r\n              <div class=\"text-center\">\r\n                <h1 class=\"h4 text-gray-900 mb-4\">회원가입</h1>\r\n              </div>\r\n              <form class=\"user\" @submit.prevent=\"registerUser\">\r\n                <div class=\"form-group row\">\r\n                  <div class=\"col-sm-15 mb-3 mb-sm-0\">\r\n                    <input\r\n                      type=\"text\"\r\n                      class=\"form-control form-control-user\"\r\n                      v-model=\"uname\"\r\n                      placeholder=\"User Name\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group row\">\r\n                  <div class=\"col-sm-8\">\r\n                    <input\r\n                      type=\"email\"\r\n                      class=\"form-control form-control-user\"\r\n                      v-model=\"uemail\"\r\n                      placeholder=\"Email Address\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <div class=\"col-sm-4\">\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"btn btn-secondary btn-user btn-block\"\r\n                      @click=\"checkEmailDuplicate\"\r\n                    >\r\n                      Check Duplicate\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group row\">\r\n                  <div class=\"col-sm-12 mb-3 mb-sm-0\">\r\n                    <input\r\n                      type=\"tel\"\r\n                      class=\"form-control form-control-user\"\r\n                      v-model=\"utel\"\r\n                      @input=\"validateTel\"\r\n                      placeholder=\"Phone Number\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group row\">\r\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\r\n                    <input\r\n                      type=\"password\"\r\n                      class=\"form-control form-control-user\"\r\n                      v-model=\"upassword\"\r\n                      placeholder=\"Password\"\r\n                      required\r\n                      :class=\"{ 'is-invalid': upassword && !isPasswordValid }\"\r\n                    />\r\n                    <div class=\"invalid-feedback\">\r\n                      Password must be 8-16 characters long and include at least one letter, one number, and one special character.\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-6\">\r\n                    <input\r\n                      type=\"password\"\r\n                      class=\"form-control form-control-user\"\r\n                      v-model=\"repeatPassword\"\r\n                      placeholder=\"Repeat Password\"\r\n                      required\r\n                      :class=\"{ 'is-invalid': repeatPassword && upassword !== repeatPassword }\"\r\n                    />\r\n                    <div class=\"invalid-feedback\">\r\n                      Passwords do not match.\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary btn-user btn-block\">Register Account</button>\r\n                <hr />\r\n                <a href=\"index.html\" class=\"btn btn-google btn-user btn-block\">\r\n                  <i class=\"fab fa-google fa-fw\"></i> Register with Google\r\n                </a>\r\n                <a href=\"index.html\" class=\"btn btn-facebook btn-user btn-block\">\r\n                  <i class=\"fab fa-facebook-f fa-fw\"></i> Register with Facebook\r\n                </a>\r\n              </form>\r\n              <hr />\r\n              <div class=\"text-center\">\r\n                <a class=\"small\" href=\"forgot-password.html\">Forgot Password?</a>\r\n              </div>\r\n              <div class=\"text-center\">\r\n                <a class=\"small\" href=\"login.html\">Already have an account? Login!</a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'UserRegister',\r\n  data() {\r\n    return {\r\n      uname: '',\r\n      uemail: '',\r\n      utel: '',\r\n      upassword: '',\r\n      repeatPassword: '',\r\n      isPasswordValid: true\r\n    };\r\n  },\r\n  computed: {\r\n    passwordMatchMessage() {\r\n      if (!this.upassword && !this.repeatPassword) {\r\n        return '';\r\n      }\r\n      return this.upassword === this.repeatPassword\r\n        ? 'Passwords match!'\r\n        : 'Passwords do not match!';\r\n    },\r\n    passwordMatchClass() {\r\n      return this.upassword === this.repeatPassword ? 'text-success' : 'text-danger';\r\n    }\r\n  },\r\n  methods: {\r\n    async checkEmailDuplicate() {\r\n    // 이메일 유효성 검사\r\n    if (!this.uemail) {\r\n      alert('Please enter an email address.');\r\n      return;\r\n    }\r\n\r\n    // 정규 표현식을 사용하여 이메일 형식 검사\r\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailPattern.test(this.uemail)) {\r\n      alert('Please enter a valid email address.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('/api/user/check-email', { uemail: this.uemail });\r\n      if (response.data) {\r\n        alert('This email is already in use.');\r\n      } else {\r\n        alert('This email is available.');\r\n      }\r\n    } catch (error) {\r\n      alert('Error checking email: ' + error.message);\r\n    }\r\n  }\r\n    },\r\n    validateTel() {\r\n      this.utel = this.utel.replace(/[^0-9]/g, '');\r\n    },\r\n    async registerUser() {\r\n      if (this.upassword !== this.repeatPassword) {\r\n        alert('Passwords do not match.');\r\n        return;\r\n      }\r\n      if (!this.isPasswordValid) {\r\n        alert('Password must be 8-16 characters long and include at least one letter, one number, and one special character.');\r\n        return;\r\n      }\r\n      try {\r\n        const currentDate = new Date().toISOString();\r\n        const response = await axios.post('/api/user/register', {\r\n          uname: this.uname,\r\n          uemail: this.uemail,\r\n          utel: this.utel,\r\n          upassword: this.upassword,\r\n          utype: '1',\r\n          ustatus: '1',\r\n          udate: currentDate\r\n        });\r\n        if (response.status === 200) {\r\n          alert('Registration successful!');\r\n          this.$router.push({ name: 'UserLogin' });\r\n        } else {\r\n          alert('Registration failed: ' + response.data);\r\n        }\r\n      } catch (error) {\r\n        alert('Registration failed: ' + error.message);\r\n      }\r\n    }\r\n  ,\r\n  watch: {\r\n    upassword(value) {\r\n      this.isPasswordValid = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*?_]).{8,16}$/.test(value);\r\n    }\r\n  }}\r\n;\r\n</script>\r\n\r\n<style scoped>\r\n@import '../../assets/startbootstrap-sb-admin-2-gh-pages/css/sb-admin-2.min.css';\r\n@import '../../assets/startbootstrap-sb-admin-2-gh-pages/vendor/fontawesome-free/css/all.min.css';\r\n\r\n.text-success {\r\n  color: #28a745 !important;\r\n}\r\n.text-danger {\r\n  color: #dc3545 !important;\r\n}\r\n.is-invalid {\r\n  border-color: #dc3545 !important;\r\n}\r\n.invalid-feedback {\r\n  color: #dc3545;\r\n  font-size: 80%;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}